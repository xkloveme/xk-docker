name: Docker Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  NODE_REGISTRY: xkloveme/xk-node
  NGINX_REGISTRY: xkloveme/xk-nginx

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        include:
          - node-version: 20
            is_latest: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 检查 Dockerfile 是否存在
      - name: Check Dockerfile existence
        run: |
          echo "检查 Dockerfile.${{ matrix.node-version }} 是否存在"
          ls -la Dockerfile.*

      # 构建并推送 Node.js 镜像
      - name: Build and push Node.js images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.node-version }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.NODE_REGISTRY }}:${{ matrix.node-version }}-alpine
            ${{ matrix.is_latest && format('{0}:latest', env.NODE_REGISTRY) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-nginx:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 检查 Dockerfile.nginx 是否存在
      - name: Check Dockerfile.nginx existence
        run: |
          echo "检查 Dockerfile.nginx 是否存在"
          ls -la Dockerfile.*

      # 构建并推送 Nginx 镜像
      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.nginx
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.NGINX_REGISTRY }}:latest
            ${{ env.NGINX_REGISTRY }}:stable-alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 生成并推送 SBOM
  sbom:
    needs: [build, build-nginx]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install syft
        uses: anchore/sbom-action/download-syft@v0.14.3

      - name: Generate and push SBOMs
        run: |
          # Node.js images
          for version in 16 18 20; do
            syft ${{ env.NODE_REGISTRY }}:${version}-alpine -o spdx-json=node-${version}-sbom.json
            cosign attach sbom --sbom node-${version}-sbom.json --type spdx ${{ env.NODE_REGISTRY }}:${version}-alpine
          done
          
          # Nginx images
          syft ${{ env.NGINX_REGISTRY }}:latest -o spdx-json=nginx-sbom.json
          cosign attach sbom --sbom nginx-sbom.json --type spdx ${{ env.NGINX_REGISTRY }}:latest